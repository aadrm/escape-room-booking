# Generated by Django 4.2.3 on 2023-08-29 09:41

import apps.shop.models.coupon
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('shop', '0006_rename_appointmentproductgroup_productgroupappointment_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Open'), (2, 'Completed'), (3, 'Cancelled')])),
            ],
        ),
        migrations.AddField(
            model_name='coupon',
            name='apply_to_entire_cart',
            field=models.BooleanField(default=False, help_text='Whether the coupon is applied to the entire cart or a single item', verbose_name='Applies to entire cart'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='is_percent',
            field=models.BooleanField(default=False, help_text='Type of coupon, absolute value or percent', verbose_name='Is percent'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='value',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Value'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='code',
            field=models.SlugField(blank=True, default=apps.shop.models.coupon.Coupon._random_coupon_code, help_text='Only ascii characters', max_length=32, verbose_name='Code'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='combines',
            field=models.BooleanField(default=False, help_text='Allows the use of several coupons in a single cart', verbose_name='Combinable'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='product_included',
            field=models.ManyToManyField(blank=True, help_text='If empty its applicable to all products', related_name='product_include', to='shop.product', verbose_name='include products'),
        ),
    ]
