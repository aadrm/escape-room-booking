# Generated by Django 4.2.3 on 2023-09-18 15:09

import apps.shop.models.cart_item_appointment
import common.days_of_week_mixin
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('appointments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Open'), (2, 'Completed'), (3, 'Cancelled')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ProductGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('real_type', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vat_percent', models.DecimalField(decimal_places=0, default=0, help_text='In percent', max_digits=2, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='VAT')),
                ('default_coupon_code_length', models.PositiveSmallIntegerField(default=8, verbose_name='Coupon code default length')),
                ('default_coupon_validity_in_days', models.PositiveSmallIntegerField(default=365, verbose_name='Coupon default validity in days')),
                ('default_coupon_code_chars', models.SlugField(default='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', help_text='Any lower case letters will be capitalized, avoid duplicate characters', max_length=16, verbose_name='Coupon default used characters')),
                ('slot_set_aside_time', models.PositiveSmallIntegerField(default=20, help_text='Time that a slot is reserved after added to the cart', verbose_name='Slot set aside time')),
            ],
            options={
                'verbose_name_plural': ' Settings',
            },
        ),
        migrations.CreateModel(
            name='ProductGroupCoupon',
            fields=[
                ('productgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.productgroup')),
                ('shipping_cost', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Shipping cost')),
            ],
            options={
                'abstract': False,
            },
            bases=('shop.productgroup',),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('base_price', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Price')),
                ('is_purchaseable', models.BooleanField(default=True, help_text='Whether the product is selectable by the public', verbose_name='Is purchaseable')),
                ('product_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.productgroup', verbose_name='Group')),
            ],
            options={
                'ordering': ['base_price'],
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50, verbose_name='Reference')),
                ('code', models.SlugField(blank=True, max_length=32, verbose_name='Code')),
                ('value', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Value')),
                ('is_percent', models.BooleanField(default=False, help_text='Type of coupon, absolute value or percent', verbose_name='Is percent')),
                ('apply_to_entire_cart', models.BooleanField(default=False, help_text='Whether the coupon is applied to the entire cart or a single item', verbose_name='Applies to entire cart')),
                ('minimum_spend', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Minimum spend')),
                ('combines', models.BooleanField(default=False, help_text='Allows the use of several coupons in a single cart', verbose_name='Combinable')),
                ('use_counter', models.IntegerField(default=0, verbose_name='Use courter')),
                ('use_limit', models.IntegerField(default=1, verbose_name='Usage limit')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='Created')),
                ('days_valid', models.DateField(blank=True, default=365, null=True, verbose_name='Expiration date')),
                ('days_of_week', models.CharField(default='[0, 1, 2, 3, 4, 5 ,6]', max_length=50)),
                ('products_included', models.ManyToManyField(blank=True, help_text='If empty its applicable to all products', related_name='product_include', to='shop.product', verbose_name='include products')),
            ],
            bases=(models.Model, common.days_of_week_mixin.DaysOfWeekMixin),
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.cart', verbose_name='Cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product', verbose_name='Product')),
            ],
        ),
        migrations.CreateModel(
            name='CartCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='shop.cart', verbose_name='Cart')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.coupon', verbose_name='Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductGroupAppointment',
            fields=[
                ('productgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.productgroup')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointments.room', verbose_name='Room')),
            ],
            options={
                'abstract': False,
            },
            bases=('shop.productgroup',),
        ),
        migrations.CreateModel(
            name='CartItemCoupon',
            fields=[
                ('cartitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.cartitem')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.coupon', verbose_name='coupon')),
            ],
            bases=('shop.cartitem',),
        ),
        migrations.CreateModel(
            name='CartItemAppointment',
            fields=[
                ('cartitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.cartitem')),
                ('expiry', models.DateTimeField(default=apps.shop.models.cart_item_appointment.expiry_time_calc, verbose_name='Expiry')),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointments.slot', verbose_name='slot')),
            ],
            bases=('shop.cartitem',),
        ),
    ]
